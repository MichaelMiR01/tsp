
debug: when one tsp proc calls another in return and call proc is a var type.
see tsp_md5.tcl  tsp_hmac is not working
possibly in direct_tcl when return type is "var"
testcase:
tsp::proc times2 {x y} {
#tsp::procdef var -args int int
return [expr {$x * $y}]
}
tsp::proc calltimes2 {} {
#tsp::procdef void
puts "times2: [times2 8 7]"
}



change tsp_md5 proc to use original nested commands (partially complete)
hyde package - need to include "hyde" directory in env(TCL_CLASSPATH)  (like before????)

check over compiled commands: append, lappend  to be more like lappend - if
   var has been declared volatile for that command, just generated call to
   tcl command code.

c/tcl parser - must check [parse getstring $body {i-4 3}] and [parse getstring $body {i-3 3}]
for "{*}".  This is because c/tcl will expand simple text inside the parser, rather than
returning the "expand" node type.  bah.






0. clean up exit spill in generated code, only include try/catch if needed (to avoid unnecessary "if (callFrame == null)" )
0. implement nested commands [ ] in interpolated string


1. what to do with unset?  - probably generate a compile error.
   prob not needed.  just have commands that use 'varname' check if varname was in volatile list, if
   not, then spill var, and then add to volatile list in order to have it reloaded.


2. allocate tcl direct arrays for each number of arguments, or allocate largest used and Arrays.copyRangeOf() 
   to get the size needed for smaller sizes.



30. implement: expr list, lxxxxx, string, concat, append, join

40. implement simple case of: scan, format

99. implement C lang generation
