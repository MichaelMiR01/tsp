FIX (mostly done)- when invoking tcl interp or tcl direct, check if arg is a constant
	string.  create constant obj, add to variables, and to cleanup
	list.  constants should be allocated once, and incrrefcount twice.
FIX - add info is tcl interp or tcl direct call doesn't return a value 
	(e.g. puts), don't add GetResultObj code
FIX - lang_assign_var_var should not duplicate(), just copy ref and preserve()
FIX (done) - don't use Tcl_GetVar2Ex / Tcl_SetVar2Ex , use Tcl_ObjGetVar2 / Tcl_ObjSetVar2 
      instead, with constant var for name.  see constant work above.
FIX - tsp-clang - command name should just be assigned with calling obj proc, don't
      call a function just to return a command name obj.  or should this just be a
      constant?
FIX - foreach loop - must preserve loop list var and use Tcl_ListObjGetElements()
FIX - (clang) argv arrays should just be stack allocated, no need to alloc().

EXPLORE - when loading var from interp, don't incr/decr ref count for this var??  
     test with cat-ext
EXPLORE - inline util code, note tsp-java inline code is out of date!
EXPLORE - option for string type variables to just be 'var' instead.

FIX - langbench should use fconfigure binary for stdout, see original (only if clang????)





CHECK: tsp-java, tsp-generate-string, tsp-generate-list : check
  that all string dup's and new strings have a preserve()


CHECK: when assiging or converting from string, how do we
  handle usages of "string" {string} \str\ing \x73tring
  ??

CHECK: tsp-generate-set.tcl and tsp-clang, tsp-java
  use of ::tsp::lang_get_string_$
  should string just be passed to the ::tsp::lang_get_string_$ proc 
  to avoid ::tsp::lang_convert_string_string 

FIX:  lang_switch should pass a string tempvar, locked, to
      both clang and java.  clang needs it when switchvar is var type



PERFORMANCE: 
  - check that assignment to var is doing copy only when needed
  - check assign_var_var is just copying ref and preserve
  - check if we need to preserve()/release on involing tcl builtin command

  


--------------------------------------
critcl::load bug??  see github issue
--------------------------------------


PERFORMANCE:  add INLINE for some C lang_xxxx functions ???
             or just remove the INLINE from java code?




--------------------------------------


steal tcl.h determination of TCL_LL_MODIFIER and adapt to use as
TSP_LL_SUFFIX, since vc++, osx may need other than LL (e.g., vc++ I64 )


check TspFunc.java - does int_abs need to check for Long.MIN_VALUE ?  (since we can't abs that value)

add sugar and sugar {*} to jtcllib

change tsp_md5 proc to use original nested commands (partially complete)
hyde package - need to include "hyde" directory in env(TCL_CLASSPATH)  (like before????)

check over compiled commands: append, lappend  to be more like lappend - if
   var has been declared volatile for that command, just generated call to
   tcl command code.

c/tcl parser - must check [parse getstring $body {i-4 3}] and [parse getstring $body {i-3 3}]
for "{*}".  This is because c/tcl will expand simple text inside the parser, rather than
returning the "expand" node type.  bah.
HOWTO - check in 'whitespace' ie. the area between words for {*}




