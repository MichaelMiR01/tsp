# -*- tcl -*-
# -------------------------------------------------------------------------
# critcl_cproc.test
# -------------------------------------------------------------------------

source [file join \
            [file dirname [file join [pwd] [info script]]] \
            testutilities.tcl]

testsNeedTcl     8.4
testsNeedTcltest 2

support {
    useLocal lib/util84/lassign.tcl  lassign84
    useLocal lib/util84/dict.tcl     dict84

    useLocal lib/stubs/container.tcl stubs::container
    useLocal lib/stubs/reader.tcl    stubs::reader
    useLocal lib/stubs/genframe.tcl  stubs::gen

    # Helper procedures
    useLocalFile test/support.tcl
}
testing {
    useLocal lib/critcl/critcl.tcl critcl

    # Note: The next command does not influence the standard argument-
    # and result-types.
    critcl::config lines 0
}

# -------------------------------------------------------------------------
## cproc syntax

test critcl-cproc-1.0.6 {cproc, wrong\#args} -constraints tcl86plus -body {
    critcl::cproc
} -returnCodes error -result {wrong # args: should be "critcl::cproc name adefs rtype ?body? ?arg ...?"}

test critcl-cproc-1.0.5 {cproc, wrong\#args} -constraints tcl85 -body {
    critcl::cproc
} -returnCodes error -result {wrong # args: should be "critcl::cproc name adefs rtype ?body? ..."}

test critcl-cproc-1.0.4 {cproc, wrong\#args} -constraints tcl84 -body {
    critcl::cproc
} -returnCodes error -result {wrong # args: should be "critcl::cproc name adefs rtype ?body? args"}

# -------------------------------------------------------------------------
## Go through the various knobs we can use to configure the definition and output

test critcl-cproc-2.0 {cproc, simple name} -body {
    get critcl::cproc aproc {} void {}
} -result [viewFile [localPath test/cproc/2.0]]

test critcl-cproc-2.1 {cproc, namespaced name} -body {
    get critcl::cproc the::aproc {} void {}
} -result [viewFile [localPath test/cproc/2.1]]

test critcl-cproc-2.2 {cproc, Tcl vs C identifiers} -body {
    get critcl::cproc aproc+beta {} void {}
} -result [viewFile [localPath test/cproc/2.2]]

test critcl-cproc-2.3 {cproc, custom C name} -body {
    get critcl::cproc snafu {} void {} -cname 1
} -result [viewFile [localPath test/cproc/2.3]]

test critcl-cproc-2.4 {cproc, client data} -body {
    get critcl::cproc aproc {} void {} -pass-cdata 1
} -result [viewFile [localPath test/cproc/2.4]]

test critcl-cproc-2.5 {cproc, client data} -body {
    get critcl::cproc aproc {} void {} -arg-offset 3
} -result [viewFile [localPath test/cproc/2.5]]

test critcl-cproc-2.6 {cproc, int argument} -body {
    get critcl::cproc aproc {
        int anargument
    } void {}
} -result [viewFile [localPath test/cproc/2.6]]

test critcl-cproc-2.7 {cproc, optional int argument} -body {
    get critcl::cproc aproc {
        int {anargument -1}
    } void {}
} -result [viewFile [localPath test/cproc/2.7]]

test critcl-cproc-2.8 {cproc, optional args, separate blocks, not allowed (yet)} -body {
    get critcl::cproc aproc {
        int {x -1}
        int y
        int {z -1}
    } void {}
} -returnCodes error -result {Unable to handle multiple segments of optional arguments}


test critcl-cproc-2.9 {cproc, int result} -body {
    get critcl::cproc aproc {} int {}
} -result [viewFile [localPath test/cproc/2.9]]

# -------------------------------------------------------------------------
## XXX TODO one to multiple arguments
## XXX TODO optional arguments
## XXX TODO various argument types
## XXX TODO various result types
## XXX TODO ...

testsuiteCleanup

# Local variables:
# mode: tcl
# indent-tabs-mode: nil
# End:
