This is the md5 procedure from tcllib, version 1.4.4, with
some modifications:

  1. Code has been un-obfuscated, i.e., the preprocessing steps
     (macro expansion) have already been performed.

  2. Expressions simplified to move nested commands outside the expr 
     command.

  3. Expressions are kept to 64 bits by use of wide(), otherwise
     integers in tclsh8.5+ overflow into tcl bignums, and 
     performance for pure interpreter timings suffers badly.

  4. TSP annotations and tsp::proc command applied. 


The benchmark computes the md5 hash for four different sized
strings, 32 bytes, ~4k bytes, ~64k bytes, and ~256k.  The 
Tcl "time" command is iterated 10 times to average the timings.

Before the benchmark is run, the interpreter and compiled
versions are allow to "warmup".  For C/Tcl, the proc is
run once to allow byte code compilation; for JTcl, the proc
is run 10,000 times to allow the C1/C2 compiler to compile
and optimize the code.

Running the benchmark:

C Tcl 8.6.x 
   tclsh8.6 RUN.tcl

JTcl 2.8.0
   jtcl RUN.tcl


