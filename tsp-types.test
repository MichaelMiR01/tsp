package require tcltest

source tsp.tcl

# parse a command string, return a compUnit dict
proc __parse {body} {
    return [parse command $body {0 end}]
}

proc __initCompUnit {body} {
    return [::tsp::init_compunit filename name procargs $body]
}

#############################################################################
# getVarType / setVarType 

::tcltest::test setVarType-1 {setVarType} -setup {
} -body {
    set compUnit [__initCompUnit ""]
    ::tsp::setVarType compUnit x double
    ::tsp::getVarType compUnit x
} -result {double}

::tcltest::test setVarType-2 {setVarType redefinition} -setup {
} -body {
    set compUnit [__initCompUnit ""]
    ::tsp::setVarType compUnit x double
    catch {::tsp::setVarType compUnit x int} result
    set result
} -result {redefinition of var "x" from "double" to "int"}



#############################################################################
# isValidIdent

::tcltest::test isValidIdent-1 {invalid ident 1} -setup {
} -body {
    ::tsp::isValidIdent @!abc
} -result {0}

::tcltest::test isValidIdent-2 {invalid ident 2} -setup {
} -body {
    ::tsp::isValidIdent __foo
} -result {0}

::tcltest::test isValidIdent-3 {valid ident 3} -setup {
} -body {
    ::tsp::isValidIdent _foo
} -result {1}

::tcltest::test isValidIdent-4 {valid 4} -setup {
} -body {
    ::tsp::isValidIdent Foo_bar1
} -result {1}

::tcltest::test isValidIdent-5 {invalid 5} -setup {
} -body {
    ::tsp::isValidIdent 1
} -result {0}


#############################################################################
# parse_procDefs

::tcltest::test parse_procDef-1 {parse_procDef simple} -setup {
} -body {
    set body ""
    set compUnit [__initCompUnit $body]
    dict set compUnit args {i x}
    ::tsp::parse_procDefs compUnit "#::tsp::procdef returns: int args: int double"
    list [dict get $compUnit returns] [dict get $compUnit argTypes]
} -result {int {int double}}

::tcltest::test parse_procDef-2 {parse_procDef redefinition} -setup {
} -body {
    set body ""
    set compUnit [__initCompUnit $body]
    dict set compUnit args {i x}
    ::tsp::parse_procDefs compUnit "#::tsp::procdef returns: int args: int double"
    ::tsp::parse_procDefs compUnit "#::tsp::procdef returns: double args: int double"
    dict get $compUnit errors
} -result {{1: ::tsp::procdef: attempt to redefine proc: #::tsp::procdef returns: double args: int double}}

::tcltest::test parse_procDef-3 {parse_procDef invalid return type} -setup {
} -body {
    set body ""
    set compUnit [__initCompUnit $body]
    dict set compUnit args {i x}
    ::tsp::parse_procDefs compUnit "#::tsp::procdef returns: foo args: int double"
    dict get $compUnit errors
} -result {{1: ::tsp::procdef: invalid return type: foo}}

::tcltest::test parse_procDef-4 {parse_procDef args/types do not match} -setup {
} -body {
    set body ""
    set compUnit [__initCompUnit $body]
    dict set compUnit args {i x}
    ::tsp::parse_procDefs compUnit "#::tsp::procdef returns: void args: int"
    dict get $compUnit errors
} -result {{1: ::tsp::procdef: invalid proc definition:  number of arg types 1 does not match number of args 2}}

::tcltest::test parse_procDef-5 {parse_procDef args type previously defined} -setup {
} -body {
    set body ""
    set compUnit [__initCompUnit $body]
    dict set compUnit args {i x}
    ::tsp::setVarType compUnit i double
    ::tsp::parse_procDefs compUnit "#::tsp::procdef returns: void args: int double"
    dict get $compUnit errors
} -result {{1: ::tsp::procdef: var already defined: arg "i" as type "double"}}

::tcltest::test parse_procDef-6 {empty procdef} -setup {
} -body {
    set body ""
    set compUnit [__initCompUnit $body]
    dict set compUnit args {i x}
    ::tsp::parse_procDefs compUnit "#::tsp::procdef"
    dict get $compUnit errors
} -result {{1: ::tsp::procdef: invalid proc definition, missing "returns:" keyword}}

::tcltest::test parse_procDef-7 {empty procdef returns} -setup {
} -body {
    set body ""
    set compUnit [__initCompUnit $body]
    dict set compUnit args {i x}
    ::tsp::parse_procDefs compUnit "#::tsp::procdef returns: "
    dict get $compUnit errors
} -result {{1: ::tsp::procdef: invalid return type: missing}}


#############################################################################
# parse_varDefs

::tcltest::test parse_varDefs-1 {parse_varDefs invalid type} -setup {
} -body {
    set body ""
    set compUnit [__initCompUnit $body]
    ::tsp::parse_varDefs compUnit "#::tsp::vardef foo x y z "
    dict get $compUnit errors
} -result {{1: ::tsp::vardef: invalid var type: "foo"}}

::tcltest::test parse_varDefs-2 {parse_varDefs previously defined} -setup {
} -body {
    set body ""
    set compUnit [__initCompUnit $body]
    ::tsp::parse_varDefs compUnit "#::tsp::vardef int x y z "
    ::tsp::parse_varDefs compUnit "#::tsp::vardef double a b z "
    dict get $compUnit errors
} -result {{1: ::tsp::vardef: var already defined: "z" as type "int"}}

::tcltest::test parse_varDefs-3 {parse_varDefs previously defined as same type} -setup {
} -body {
    set body ""
    set compUnit [__initCompUnit $body]
    ::tsp::parse_varDefs compUnit "#::tsp::vardef int x y z "
    ::tsp::parse_varDefs compUnit "#::tsp::vardef int  z "
    dict get $compUnit errors
} -result {}

::tcltest::test parse_varDefs-4 {parse_varDefs invalid identifier} -setup {
} -body {
    set body ""
    set compUnit [__initCompUnit $body]
    ::tsp::parse_varDefs compUnit "#::tsp::vardef int .zip "
    dict get $compUnit errors
} -result {{1: ::tsp::vardef: var is not valid identifier: ".zip"}}


#############################################################################
# parse_pragma

::tcltest::test parse_pragma-1 {parse_pragma-1} -setup {
} -body {
    set body {
        # random comment
        #::tsp::procdef returns: int args: int double
        #tsp::vardef int a y 
    }
    set compUnit [__initCompUnit $body]
    dict set compUnit args {i x}
    ::tsp::parse_pragma compUnit $body
    list [dict get $compUnit errors] [dict get $compUnit argTypes] [dict get $compUnit vars]
} -result {{} {int double} {i int x double a int y int}}

::tcltest::test parse_pragma-2 {parse_pragma-2} -setup {
} -body {
    set body {
        # random comment
        #::tsp::volatile foo bar
    }
    set compUnit [__initCompUnit $body]
    ::tsp::parse_pragma compUnit $body
    dict get $compUnit volatile
} -result {foo bar}

::tcltest::test parse_pragma-3 {parse_pragma-3} -setup {
} -body {
    set body { #tsp::nocompile }
    set compUnit [__initCompUnit $body]
    ::tsp::parse_pragma compUnit $body
    dict get $compUnit compileType
} -result {nocompile}

::tcltest::test parse_pragma-4 {parse_pragma-4} -setup {
} -body {
    set body { #tsp::assertcompile }
    set compUnit [__initCompUnit $body]
    ::tsp::parse_pragma compUnit $body
    dict get $compUnit compileType
} -result {assertcompile}

::tcltest::test parse_pragma-4 {parse_pragma-4} -setup {
} -body {
    set body { #tsp::nocompile
             #::tsp::assertcompile }
    set compUnit [__initCompUnit $body]
    ::tsp::parse_pragma compUnit $body
    dict get $compUnit errors
} -result {{2: cannot set ::tsp::assertcompile', was previously set as: "nocompile"}}

::tcltest::test parse_pragma-5 {parse_pragma-5} -setup {
} -body {
    set body { #tsp::assertcompile
      #tsp::nocompile }
    set compUnit [__initCompUnit $body]
    ::tsp::parse_pragma compUnit $body
    dict get $compUnit errors
} -result {{2: cannot set ::tsp::nocompile', was previously set as: "assertcompile"}}



